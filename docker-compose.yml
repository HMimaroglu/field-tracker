version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: field-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: field_tracker
      POSTGRES_USER: field_tracker
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U field_tracker -d field_tracker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Field Tracker API Server
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
    container_name: field-tracker-server
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://field_tracker:${DB_PASSWORD:-secure_password_123}@postgres:5432/field_tracker
      
      # Server Configuration
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 3000
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_this_in_production}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3001,https://yourdomain.com}
      
      # Storage (Local by default, can be changed to S3)
      STORAGE_TYPE: local
      UPLOAD_DIR: /app/uploads
      
      # S3 Configuration (uncomment if using S3)
      # STORAGE_TYPE: s3
      # S3_BUCKET: your-bucket-name
      # S3_REGION: us-east-1
      # S3_ACCESS_KEY: your-access-key
      # S3_SECRET_KEY: your-secret-key
      # S3_ENDPOINT: https://s3.amazonaws.com
      
      # License System
      LICENSE_PUBLIC_KEY: ${LICENSE_PUBLIC_KEY:-}
    volumes:
      - uploads_data:/app/uploads
      - ./licenses:/app/licenses:ro
    ports:
      - "${SERVER_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Web Dashboard
  web-admin:
    build:
      context: .
      dockerfile: apps/web-admin/Dockerfile
    container_name: field-tracker-admin
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:3000}
      NODE_ENV: production
    ports:
      - "${ADMIN_PORT:-3001}:3000"
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: field-tracker-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - web-admin
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  default:
    name: field-tracker-network